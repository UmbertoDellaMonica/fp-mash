// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: MinFingerPrintHash.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b976d99b743b8d39);
CAPNP_DECLARE_SCHEMA(8411a68d693aaad7);
CAPNP_DECLARE_SCHEMA(c81cc09e1e17eaca);
CAPNP_DECLARE_SCHEMA(86286fe2c2c86720);

}  // namespace schemas
}  // namespace capnp

namespace capnp {

struct MinHashFingerPrint {
  MinHashFingerPrint() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ReferenceList;
  struct HashList;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b976d99b743b8d39, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MinHashFingerPrint::ReferenceList {
  ReferenceList() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Reference;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8411a68d693aaad7, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MinHashFingerPrint::ReferenceList::Reference {
  Reference() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c81cc09e1e17eaca, 2, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MinHashFingerPrint::HashList {
  HashList() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86286fe2c2c86720, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class MinHashFingerPrint::Reader {
public:
  typedef MinHashFingerPrint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getKmerSize() const;

  inline  ::uint32_t getWindowSize() const;

  inline  ::uint32_t getMinHashesPerWindow() const;

  inline bool getConcatenated() const;

  inline bool hasReferenceListOld() const;
  inline  ::capnp::MinHashFingerPrint::ReferenceList::Reader getReferenceListOld() const;

  inline float getError() const;

  inline bool getNoncanonical() const;

  inline bool hasAlphabet() const;
  inline  ::capnp::Text::Reader getAlphabet() const;

  inline bool getPreserveCase() const;

  inline  ::uint32_t getHashSeed() const;

  inline bool hasReferenceList() const;
  inline  ::capnp::MinHashFingerPrint::ReferenceList::Reader getReferenceList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MinHashFingerPrint::Builder {
public:
  typedef MinHashFingerPrint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getKmerSize();
  inline void setKmerSize( ::uint32_t value);

  inline  ::uint32_t getWindowSize();
  inline void setWindowSize( ::uint32_t value);

  inline  ::uint32_t getMinHashesPerWindow();
  inline void setMinHashesPerWindow( ::uint32_t value);

  inline bool getConcatenated();
  inline void setConcatenated(bool value);

  inline bool hasReferenceListOld();
  inline  ::capnp::MinHashFingerPrint::ReferenceList::Builder getReferenceListOld();
  inline void setReferenceListOld( ::capnp::MinHashFingerPrint::ReferenceList::Reader value);
  inline  ::capnp::MinHashFingerPrint::ReferenceList::Builder initReferenceListOld();
  inline void adoptReferenceListOld(::capnp::Orphan< ::capnp::MinHashFingerPrint::ReferenceList>&& value);
  inline ::capnp::Orphan< ::capnp::MinHashFingerPrint::ReferenceList> disownReferenceListOld();

  inline float getError();
  inline void setError(float value);

  inline bool getNoncanonical();
  inline void setNoncanonical(bool value);

  inline bool hasAlphabet();
  inline  ::capnp::Text::Builder getAlphabet();
  inline void setAlphabet( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlphabet(unsigned int size);
  inline void adoptAlphabet(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlphabet();

  inline bool getPreserveCase();
  inline void setPreserveCase(bool value);

  inline  ::uint32_t getHashSeed();
  inline void setHashSeed( ::uint32_t value);

  inline bool hasReferenceList();
  inline  ::capnp::MinHashFingerPrint::ReferenceList::Builder getReferenceList();
  inline void setReferenceList( ::capnp::MinHashFingerPrint::ReferenceList::Reader value);
  inline  ::capnp::MinHashFingerPrint::ReferenceList::Builder initReferenceList();
  inline void adoptReferenceList(::capnp::Orphan< ::capnp::MinHashFingerPrint::ReferenceList>&& value);
  inline ::capnp::Orphan< ::capnp::MinHashFingerPrint::ReferenceList> disownReferenceList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MinHashFingerPrint::Pipeline {
public:
  typedef MinHashFingerPrint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::MinHashFingerPrint::ReferenceList::Pipeline getReferenceListOld();
  inline  ::capnp::MinHashFingerPrint::ReferenceList::Pipeline getReferenceList();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MinHashFingerPrint::ReferenceList::Reader {
public:
  typedef ReferenceList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReferences() const;
  inline  ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>::Reader getReferences() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MinHashFingerPrint::ReferenceList::Builder {
public:
  typedef ReferenceList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReferences();
  inline  ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>::Builder getReferences();
  inline void setReferences( ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>::Builder initReferences(unsigned int size);
  inline void adoptReferences(::capnp::Orphan< ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>> disownReferences();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MinHashFingerPrint::ReferenceList::Pipeline {
public:
  typedef ReferenceList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MinHashFingerPrint::ReferenceList::Reference::Reader {
public:
  typedef Reference Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasSequence() const;
  inline  ::capnp::Text::Reader getSequence() const;

  inline bool hasQuality() const;
  inline  ::capnp::Text::Reader getQuality() const;

  inline  ::uint32_t getLength() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasComment() const;
  inline  ::capnp::Text::Reader getComment() const;

  inline  ::uint64_t getLength64() const;

  inline bool hasCounts32() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getCounts32() const;

  inline bool getCounts32Sorted() const;

  inline bool hasSubSketchList() const;
  inline  ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>::Reader getSubSketchList() const;

  inline bool getUseHash64() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MinHashFingerPrint::ReferenceList::Reference::Builder {
public:
  typedef Reference Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasSequence();
  inline  ::capnp::Text::Builder getSequence();
  inline void setSequence( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSequence(unsigned int size);
  inline void adoptSequence(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSequence();

  inline bool hasQuality();
  inline  ::capnp::Text::Builder getQuality();
  inline void setQuality( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initQuality(unsigned int size);
  inline void adoptQuality(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownQuality();

  inline  ::uint32_t getLength();
  inline void setLength( ::uint32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasComment();
  inline  ::capnp::Text::Builder getComment();
  inline void setComment( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initComment(unsigned int size);
  inline void adoptComment(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownComment();

  inline  ::uint64_t getLength64();
  inline void setLength64( ::uint64_t value);

  inline bool hasCounts32();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getCounts32();
  inline void setCounts32( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCounts32(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initCounts32(unsigned int size);
  inline void adoptCounts32(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownCounts32();

  inline bool getCounts32Sorted();
  inline void setCounts32Sorted(bool value);

  inline bool hasSubSketchList();
  inline  ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>::Builder getSubSketchList();
  inline void setSubSketchList( ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>::Builder initSubSketchList(unsigned int size);
  inline void adoptSubSketchList(::capnp::Orphan< ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>> disownSubSketchList();

  inline bool getUseHash64();
  inline void setUseHash64(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MinHashFingerPrint::ReferenceList::Reference::Pipeline {
public:
  typedef Reference Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MinHashFingerPrint::HashList::Reader {
public:
  typedef HashList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHashList64() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getHashList64() const;

  inline bool hasHashList32() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getHashList32() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MinHashFingerPrint::HashList::Builder {
public:
  typedef HashList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHashList64();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getHashList64();
  inline void setHashList64( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setHashList64(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initHashList64(unsigned int size);
  inline void adoptHashList64(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownHashList64();

  inline bool hasHashList32();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getHashList32();
  inline void setHashList32( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setHashList32(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initHashList32(unsigned int size);
  inline void adoptHashList32(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownHashList32();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MinHashFingerPrint::HashList::Pipeline {
public:
  typedef HashList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t MinHashFingerPrint::Reader::getKmerSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t MinHashFingerPrint::Builder::getKmerSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MinHashFingerPrint::Builder::setKmerSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t MinHashFingerPrint::Reader::getWindowSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t MinHashFingerPrint::Builder::getWindowSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MinHashFingerPrint::Builder::setWindowSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t MinHashFingerPrint::Reader::getMinHashesPerWindow() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t MinHashFingerPrint::Builder::getMinHashesPerWindow() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MinHashFingerPrint::Builder::setMinHashesPerWindow( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool MinHashFingerPrint::Reader::getConcatenated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool MinHashFingerPrint::Builder::getConcatenated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void MinHashFingerPrint::Builder::setConcatenated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline bool MinHashFingerPrint::Reader::hasReferenceListOld() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::Builder::hasReferenceListOld() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::MinHashFingerPrint::ReferenceList::Reader MinHashFingerPrint::Reader::getReferenceListOld() const {
  return ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::MinHashFingerPrint::ReferenceList::Builder MinHashFingerPrint::Builder::getReferenceListOld() {
  return ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp::MinHashFingerPrint::ReferenceList::Pipeline MinHashFingerPrint::Pipeline::getReferenceListOld() {
  return  ::capnp::MinHashFingerPrint::ReferenceList::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MinHashFingerPrint::Builder::setReferenceListOld( ::capnp::MinHashFingerPrint::ReferenceList::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::MinHashFingerPrint::ReferenceList::Builder MinHashFingerPrint::Builder::initReferenceListOld() {
  return ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::Builder::adoptReferenceListOld(
    ::capnp::Orphan< ::capnp::MinHashFingerPrint::ReferenceList>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::MinHashFingerPrint::ReferenceList> MinHashFingerPrint::Builder::disownReferenceListOld() {
  return ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float MinHashFingerPrint::Reader::getError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float MinHashFingerPrint::Builder::getError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void MinHashFingerPrint::Builder::setError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool MinHashFingerPrint::Reader::getNoncanonical() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline bool MinHashFingerPrint::Builder::getNoncanonical() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void MinHashFingerPrint::Builder::setNoncanonical(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline bool MinHashFingerPrint::Reader::hasAlphabet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::Builder::hasAlphabet() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MinHashFingerPrint::Reader::getAlphabet() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MinHashFingerPrint::Builder::getAlphabet() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::Builder::setAlphabet( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MinHashFingerPrint::Builder::initAlphabet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void MinHashFingerPrint::Builder::adoptAlphabet(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MinHashFingerPrint::Builder::disownAlphabet() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool MinHashFingerPrint::Reader::getPreserveCase() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}

inline bool MinHashFingerPrint::Builder::getPreserveCase() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}
inline void MinHashFingerPrint::Builder::setPreserveCase(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t MinHashFingerPrint::Reader::getHashSeed() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 42u);
}

inline  ::uint32_t MinHashFingerPrint::Builder::getHashSeed() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 42u);
}
inline void MinHashFingerPrint::Builder::setHashSeed( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, 42u);
}

inline bool MinHashFingerPrint::Reader::hasReferenceList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::Builder::hasReferenceList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::MinHashFingerPrint::ReferenceList::Reader MinHashFingerPrint::Reader::getReferenceList() const {
  return ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::MinHashFingerPrint::ReferenceList::Builder MinHashFingerPrint::Builder::getReferenceList() {
  return ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp::MinHashFingerPrint::ReferenceList::Pipeline MinHashFingerPrint::Pipeline::getReferenceList() {
  return  ::capnp::MinHashFingerPrint::ReferenceList::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void MinHashFingerPrint::Builder::setReferenceList( ::capnp::MinHashFingerPrint::ReferenceList::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::MinHashFingerPrint::ReferenceList::Builder MinHashFingerPrint::Builder::initReferenceList() {
  return ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::Builder::adoptReferenceList(
    ::capnp::Orphan< ::capnp::MinHashFingerPrint::ReferenceList>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::MinHashFingerPrint::ReferenceList> MinHashFingerPrint::Builder::disownReferenceList() {
  return ::capnp::_::PointerHelpers< ::capnp::MinHashFingerPrint::ReferenceList>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool MinHashFingerPrint::ReferenceList::Reader::hasReferences() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::ReferenceList::Builder::hasReferences() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>::Reader MinHashFingerPrint::ReferenceList::Reader::getReferences() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>::Builder MinHashFingerPrint::ReferenceList::Builder::getReferences() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::ReferenceList::Builder::setReferences( ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>::Builder MinHashFingerPrint::ReferenceList::Builder::initReferences(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void MinHashFingerPrint::ReferenceList::Builder::adoptReferences(
    ::capnp::Orphan< ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>> MinHashFingerPrint::ReferenceList::Builder::disownReferences() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::ReferenceList::Reference,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MinHashFingerPrint::ReferenceList::Reference::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::ReferenceList::Reference::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MinHashFingerPrint::ReferenceList::Reference::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MinHashFingerPrint::ReferenceList::Reference::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MinHashFingerPrint::ReferenceList::Reference::Reader::hasSequence() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::ReferenceList::Reference::Builder::hasSequence() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MinHashFingerPrint::ReferenceList::Reference::Reader::getSequence() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::getSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setSequence( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::initSequence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::adoptSequence(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MinHashFingerPrint::ReferenceList::Reference::Builder::disownSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool MinHashFingerPrint::ReferenceList::Reference::Reader::hasQuality() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::ReferenceList::Reference::Builder::hasQuality() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MinHashFingerPrint::ReferenceList::Reference::Reader::getQuality() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::getQuality() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setQuality( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::initQuality(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::adoptQuality(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MinHashFingerPrint::ReferenceList::Reference::Builder::disownQuality() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t MinHashFingerPrint::ReferenceList::Reference::Reader::getLength() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t MinHashFingerPrint::ReferenceList::Reference::Builder::getLength() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setLength( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MinHashFingerPrint::ReferenceList::Reference::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::ReferenceList::Reference::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MinHashFingerPrint::ReferenceList::Reference::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MinHashFingerPrint::ReferenceList::Reference::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool MinHashFingerPrint::ReferenceList::Reference::Reader::hasComment() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::ReferenceList::Reference::Builder::hasComment() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MinHashFingerPrint::ReferenceList::Reference::Reader::getComment() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::getComment() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setComment( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::initComment(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::adoptComment(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MinHashFingerPrint::ReferenceList::Reference::Builder::disownComment() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint64_t MinHashFingerPrint::ReferenceList::Reference::Reader::getLength64() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MinHashFingerPrint::ReferenceList::Reference::Builder::getLength64() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setLength64( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool MinHashFingerPrint::ReferenceList::Reference::Reader::hasCounts32() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::ReferenceList::Reference::Builder::hasCounts32() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader MinHashFingerPrint::ReferenceList::Reference::Reader::getCounts32() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::getCounts32() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setCounts32( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setCounts32(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::initCounts32(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::adoptCounts32(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> MinHashFingerPrint::ReferenceList::Reference::Builder::disownCounts32() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool MinHashFingerPrint::ReferenceList::Reference::Reader::getCounts32Sorted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool MinHashFingerPrint::ReferenceList::Reference::Builder::getCounts32Sorted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setCounts32Sorted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool MinHashFingerPrint::ReferenceList::Reference::Reader::hasSubSketchList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::ReferenceList::Reference::Builder::hasSubSketchList() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>::Reader MinHashFingerPrint::ReferenceList::Reference::Reader::getSubSketchList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::getSubSketchList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setSubSketchList( ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>::Builder MinHashFingerPrint::ReferenceList::Reference::Builder::initSubSketchList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::adoptSubSketchList(
    ::capnp::Orphan< ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>> MinHashFingerPrint::ReferenceList::Reference::Builder::disownSubSketchList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::MinHashFingerPrint::HashList,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool MinHashFingerPrint::ReferenceList::Reference::Reader::getUseHash64() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool MinHashFingerPrint::ReferenceList::Reference::Builder::getUseHash64() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void MinHashFingerPrint::ReferenceList::Reference::Builder::setUseHash64(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline bool MinHashFingerPrint::HashList::Reader::hasHashList64() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::HashList::Builder::hasHashList64() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader MinHashFingerPrint::HashList::Reader::getHashList64() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder MinHashFingerPrint::HashList::Builder::getHashList64() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::HashList::Builder::setHashList64( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void MinHashFingerPrint::HashList::Builder::setHashList64(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder MinHashFingerPrint::HashList::Builder::initHashList64(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void MinHashFingerPrint::HashList::Builder::adoptHashList64(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> MinHashFingerPrint::HashList::Builder::disownHashList64() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MinHashFingerPrint::HashList::Reader::hasHashList32() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MinHashFingerPrint::HashList::Builder::hasHashList32() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader MinHashFingerPrint::HashList::Reader::getHashList32() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder MinHashFingerPrint::HashList::Builder::getHashList32() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MinHashFingerPrint::HashList::Builder::setHashList32( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void MinHashFingerPrint::HashList::Builder::setHashList32(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder MinHashFingerPrint::HashList::Builder::initHashList32(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void MinHashFingerPrint::HashList::Builder::adoptHashList32(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> MinHashFingerPrint::HashList::Builder::disownHashList32() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

